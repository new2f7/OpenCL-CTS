if(WIN32)
list(APPEND CLConform_LIBRARIES  glut32 opengl32 glu32 )
else(WIN32)
list(APPEND CLConform_LIBRARIES  GL glut GLEW GLU)
endif(WIN32)

set (GL_SOURCES
        main.cpp
        test_buffers.cpp
        test_images_1Darray.cpp
        test_images_2Darray.cpp
        test_images_2D.cpp
        test_images_3D.cpp
        test_images_1D.cpp
        test_renderbuffer.cpp
        test_images_write_common.cpp
        test_images_read_common.cpp
        test_images_getinfo_common.cpp
        test_renderbuffer_info.cpp
        test_fence_sync.cpp
        helpers.cpp
    ${CMAKE_SOURCE_DIR}/images/image_helpers.cpp
    ${CMAKE_SOURCE_DIR}/../test_common/gl/helpers.cpp
    ${CMAKE_SOURCE_DIR}/../test_common/harness/imageHelpers.cpp
    ${CMAKE_SOURCE_DIR}/../test_common/harness/genericThread.cpp
	${CMAKE_SOURCE_DIR}/../test_common/harness/errorHelpers.c
	${CMAKE_SOURCE_DIR}/../test_common/harness/threadTesting.c
	${CMAKE_SOURCE_DIR}/../test_common/harness/testHarness.c
	${CMAKE_SOURCE_DIR}/../test_common/harness/kernelHelpers.c
	${CMAKE_SOURCE_DIR}/../test_common/harness/mt19937.c
	${CMAKE_SOURCE_DIR}/../test_common/harness/conversions.c
    ${CMAKE_SOURCE_DIR}/../test_common/harness/msvc9.c
    )

if (WIN32)
    list (APPEND GL_SOURCES ${CMAKE_SOURCE_DIR}/../test_common/gl/setup_win32.cpp)
else(WIN32)
    list (APPEND GL_SOURCES ${CMAKE_SOURCE_DIR}/../test_common/gl/setup_x11.cpp)
    include_directories(".")
endif(WIN32)    

# Compiling GLEW along with the project if the compiler is MINGW.
# The mingw linker was giving weird errors while linking to glew32.lib generated by 
# MSVC.
if(MINGW)
    list (APPEND GL_SOURCES GLEW/glew.c)
    set_source_files_properties(
        ${GL_SOURCES}
        COMPILE_FLAGS -DGLEW_STATIC)
    include_directories("./GLEW/")
endif(MINGW)

if (MSVC)
    if(CMAKE_CL_64)
    list(APPEND CLConform_LIBRARIES glew64)
    else(CMAKE_CL_64)
    list(APPEND CLConform_LIBRARIES glew32)
    endif(CMAKE_CL_64)
endif(MSVC)

add_executable(conformance_test_gl
        ${GL_SOURCES} ${GLUT_SOURCES})

set_source_files_properties(
        ${GL_SOURCES}
        PROPERTIES LANGUAGE CXX)
        
TARGET_LINK_LIBRARIES(conformance_test_gl
        ${CLConform_LIBRARIES})
